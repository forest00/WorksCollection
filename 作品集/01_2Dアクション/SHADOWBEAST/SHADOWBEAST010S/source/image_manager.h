#pragma once
/**
 * @file  image_manager.h
 * 画像ファイル読み込み一括管理
 *
 * @date 2017-06-14
 * @version 3.0
 *
 * Copyright (C) Amusement Media Academy All rights Resved.
 */


 // 画像ファイル番号(使用する画像ファイル一覧と合わせる)
typedef enum {
	IMAGE_NONE,
	IMAGE_TEAM_LOGO,

	IMAGE_TITLE_BG,
	IMAGE_TITLE_REDEYES,
	IMAGE_TITLE_REDEYES2,
	IMAGE_TITLE_MIST,
	IMAGE_TITLE_MIST2,
	IMAGE_TITLE_LOGO,
	IMAGE_TITLE_PRESS_ANY_BUTTON,

	IMAGE_ENDING_STAFFROLE,
	
	IMAGE_MODESELECT_START,
	IMAGE_MODESELECT_CONTINUE,
	IMAGE_MODESELECT_OPTION,
	IMAGE_MODESELECT_EXIT,

	IMAGE_OPTION_OPRATION,
	IMAGE_OPTION_BRIGHTSELECT,
	IMAGE_SELECTED_BRIGHT,
	IMAGE_BRIGHT_GAUGE,

	IMAGE_WHITE_BACK,
	IMAGE_GAME_PLAY_BG_STAGE1,
	IMAGE_GAME_PLAY_BG_STAGE2,
	IMAGE_PAUSE_BG,

	IMAGE_STAGE_CLEAR,
	IMAGE_GAME_OVER,

	IMAGE_OPENING_TEXT1,
	IMAGE_OPENING_TEXT2,
	IMAGE_OPENING_TEXT3,
	IMAGE_OPENING_TEXT4,
	IMAGE_OPENING_TEXT5,
	IMAGE_OPENING_TEXT6,

	IMAGE_BACK,

	IMAGE_TUTORIAL1,
	IMAGE_TUTORIAL2,
	IMAGE_TUTORIAL3,
	IMAGE_TUTORIAL4,
	IMAGE_TUTORIAL5,
	IMAGE_TUTORIAL6,

	IMAGE_STAGESELECT_TUTORIAL_STR,
	IMAGE_STAGESELECT_STAGE1_STR,
	IMAGE_STAGESELECT_STAGE2_STR,
	
	IMAGE_OPENING_PLOT_TITLELOGO,
	IMAGE_TXSTBOX_STAGESELECT_TUTORIAL,

    IMAGE_STAGESELECT_MODEBACK,
	IMAGE_A_BACK,
	
	IMAGE_STAGE2_OP,


	IMAGE_ENEMY_HOLE,
	IMAGE_CLOUD_A,
	IMAGE_CLOUD_B,
	IMAGE_CLOUD_C,

	IMAGE_BLACK_GRAIN,
	IMAGE_DARKBALL,
	IMAGE_FIREBALL,
	IMAGE_FIRESPREAD,

	IMAGE_DARK,
	IMAGE_CLAW,
	IMAGE_BLOCK_STAGE1,
	IMAGE_PLAYER_ICON,
	IMAGE_CASTLE_MAIN,
	IMAGE_CASTLE_RED,
	IMAGE_CASTLE_GREEN,
	IMAGE_CASTLE_BLUE,
	IMAGE_SHIP,
	IMAGE_SHIP_BREAK,

	IMAGE_HP_HEAL_ITEM,
	IMAGE_TREE_SIGN,

	IMAGE_1P_IDLE,

	IMAGE_1P_WALK,
	IMAGE_1P_JUMP,
	IMAGE_1P_MAIN_ATTACK1,
	IMAGE_1P_MAIN_ATTACK2,
	IMAGE_1P_MAIN_ATTACK3,
	IMAGE_1P_SUB_ATTACK_BEFORE,
	IMAGE_1P_SUB_ATTACK_AFTER,
	IMAGE_1P_GUARD,
	IMAGE_1P_AVOID,
	IMAGE_1P_DAMAGE,
	IMAGE_1P_KNOCK_OUT,
	IMAGE_1P_DEAD,
	IMAGE_1P_RESURRECTION,

	IMAGE_CHAIN_1P,
	IMAGE_1P_MAIN_ATK_EFFECT,
	IMAGE_1P_SUB_ATK_EFFECT,

	IMAGE_2P_IDLE,
	IMAGE_2P_WALK,
	IMAGE_2P_JUMP,
	IMAGE_2P_MAIN_ATTACK,
	IMAGE_2P_SUB_ATTACK,
	IMAGE_2P_GUARD,
	IMAGE_2P_AVOID,
	IMAGE_2P_DAMAGE,
	IMAGE_2P_KNOCK_OUT,
	IMAGE_2P_DEAD,
	IMAGE_2P_RESURRECTION,
	IMAGE_2P_SHOOT_RECOVERED_BULLETS,
	IMAGE_2P_MAIN_ATK_BULLET,
	IMAGE_2P_SUB_ATK_BULLET_EFFECT,
	IMAGE_2P_RECOVERED_BULLETS,

	IMAGE_GOBLIN_WAIT,
	IMAGE_GOBLIN_WALK,
	IMAGE_GOBLIN_DAMAGE,
	IMAGE_GOBLIN_ATTACK,

	IMAGE_WYVERN_WAIT,
	IMAGE_WYVERN_WALK,
	IMAGE_WYVERN_DAMAGE,
	IMAGE_WYVERN_ATTACK,

	IMAGE_SNAKE_WAIT,
	IMAGE_SNAKE_WALK,
	IMAGE_SNAKE_DAMAGE,
	IMAGE_SNAKE_ATTACK,

	IMAGE_BOSS1_WAIT,
	IMAGE_BOSS1_WALK,
	IMAGE_BOSS1_ATTACK1,
	IMAGE_BOSS1_ATTACK2,
	IMAGE_BOSS1_ATTACK3,
	IMAGE_BOSS1_DAMAGE,

	IMAGE_BOSS2_MOTION_WAIT,
	IMAGE_BOSS2_MOTION_WALK,
	IMAGE_BOSS2_MOTION_BITE,
	IMAGE_BOSS2_MOTION_THUNDER,
	IMAGE_BOSS2_MOTION_WATER,
	IMAGE_BOSS2_MOTION_DAMAGE,
	IMAGE_BOSS2_MOTION_DEATH,

	IMAGE_THUNDER_SUGGESTION,
	IMAGE_THUNDER_ANIM,

	IMAGE_NAME_PRATE_1P,
	IMAGE_NAME_PRATE_2P,

	
	IMAGE_TEXT_WINDOW_FRAME,
	IMAGE_MSG_PLAYER_DEAD_COUNT,
	IMAGE_MSG_ENEMY_DEAD_COUNT,
	IMAGE_MSG_CASTLE_HP,

	IMAGE_NUMBER_0,
	IMAGE_NUMBER_1,
	IMAGE_NUMBER_2,
	IMAGE_NUMBER_3,
	IMAGE_NUMBER_4,
	IMAGE_NUMBER_5,
	IMAGE_NUMBER_6,
	IMAGE_NUMBER_7,
	IMAGE_NUMBER_8,
	IMAGE_NUMBER_9,

	IMAGE_BLOOD_ANIM,


	IMAGE_TUTORIAL_F_,
	IMAGE_TUTORIAL_0_,
	IMAGE_TUTORIAL_1_,
	IMAGE_TUTORIAL_2_,
	IMAGE_TUTORIAL_3_,
	IMAGE_TUTORIAL_4_,
	IMAGE_TUTORIAL_5_,
	IMAGE_TUTORIAL_6_,
	IMAGE_TUTORIAL_7_,

	IMAGE_HP_METER,
	IMAGE_HP_BAR_FRAME_1P,
	IMAGE_HP_BAR_FRAME_2P,
	IMAGE_BASE_HP_FRAME,
	IMAGE_BASE_HP_NEEDLE,
	IMAGE_1P_FACE_ICON,
	IMAGE_2P_FACE_ICON,

	IMAGE_MAX,
} ImageFileId;

///< 画像データの読み込み種別
typedef enum {
	LOAD_NON,
	LOAD_TEXTURE,
	LOAD_BLK_TEXTURE,
	LOAD_BLK_TEXTURE_LR,
	LOAD_END,
} ImageLoadKind;

///< ブロックデータ用構造体
typedef struct {
	ImageLoadKind kind;     ///< 読み込み方
	char *file;             ///< ファイル名
	int x_siz;              ///< 横ブロックサイズ
	int y_siz;              ///< 縦ブロックサイズ
	int x_num;              ///< 横ブロック数
	int y_num;              ///< 縦ブロック数
	int a_num;              ///< ブロック総数
	int duration;           ///< アニメーション時間
} BlockImage;




/**
*  画像ファイル情報の取得
*
*  @param file_id ファイル番号
*  @return BlockImageへのポインタ
*/
const BlockImage* getImageFile(ImageFileId file_id);

int getImageSize(ImageFileId file_id, int *width, int *height);

/**
 *  画像ファイル管理の初期化
 */
void imageMgrInit();

/**
 *  画像ファイルの読み込み
 *
 *  画像を読み込み、ハンドルをg_handle_bufferに格納する。
 *  @param bi ブロックデータへのポインタ
 */
void imageMgrLoadFromFile(const BlockImage *bi);

/**
 *  画像ハンドルの取得
 *
 *  ハンドルをg_handle_bufferから取り出します。
 *  @param file_no ファイル番号
 *  @param block_no ブロック番号
 *  @return 画像ハンドル
 */
int imageMgrGetHandle(int file_no, int block_no);
